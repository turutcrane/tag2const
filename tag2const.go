package main

import (
	"bytes"
	"flag"
	"fmt"
	"go/ast"
	"go/format"
	"go/token"
	"go/types"
	"log"
	"os"
	"reflect"
	"strings"

	"golang.org/x/tools/go/packages"
)

// Generator holds the state of the analysis. Primarily used to buffer
// the output for format.Source.

type Generator struct {
	buf    bytes.Buffer `db:"xxxx,abc" xx:"yyy"`
	prefix string
	tag    string
	types  []string `db:"-"`
	c      map[string]string
}

func (g *Generator) Printf(format string, args ...interface{}) {
	fmt.Fprintf(&g.buf, format, args...)
}

func main() {
	typeNames := flag.String("type", "", "comma-separated list of type names; must be set")
	prefix := flag.String("prefix", "c", "const prefix")
	tag := flag.String("tag", "", "tag to constantizate")
	buildTags := flag.String("buildtags", "", "comma-separated list of build tags to apply")

	flag.Parse()

	if *tag == "" {
		fmt.Printf("tag flag is reqired\n")
		os.Exit(1)
	}
	if len(*typeNames) == 0 {
		flag.Usage()
		os.Exit(2)
	}
	types := strings.Split(*typeNames, ",")

	// We accept either one directory or a list of files. Which do we have?
	args := flag.Args()
	if len(args) == 0 {
		// Default: process whole package in current directory.
		args = []string{"."}
	}

	g := Generator{
		prefix: *prefix,
		tag:    *tag,
		types:  types,
		c:      map[string]string{},
	}

	var btags []string
	if len(*buildTags) > 0 {
		btags = strings.Split(*buildTags, ",")
	}
	pkg := parsePackage(args, btags)

	// Print the header and package clause.
	g.Printf("// Code generated by \"tag2const %s\"; DO NOT EDIT.\n", strings.Join(os.Args[1:], " "))
	g.Printf("\n")
	g.Printf("package %s", pkg.Name)
	g.Printf("\n")

	g.generate(pkg)
	
	os.Stdout.Write(g.format())
}

// parsePackage analyzes the single package constructed from the patterns and tags.
// parsePackage exits if there is an error.
func parsePackage(patterns []string, buildTags []string) *packages.Package {
	cfg := &packages.Config{
		Mode: packages.LoadSyntax,
		// TODO: Need to think about constants in test files. Maybe write type_string_test.go
		// in a separate pass? For later.
		Tests:      false,
		BuildFlags: []string{fmt.Sprintf("-tags=%s", strings.Join(buildTags, " "))},
	}
	pkgs, err := packages.Load(cfg, patterns...)
	if err != nil {
		log.Fatal(err)
	}
	if len(pkgs) != 1 {
		log.Fatalf("error: %d packages found", len(pkgs))
	}
	return pkgs[0]
}

type File struct {
	Fset *token.FileSet `db:"f-set"`
	Defs map[*ast.Ident]types.Object
	g    *Generator `db:"gen"`
}

func (g *Generator) generate(pkg *packages.Package) {
	for _, syn := range pkg.Syntax {
		if syn != nil {
			f := File{
				Fset: pkg.Fset,
				Defs: pkg.TypesInfo.Defs,
				g:    g,
			}
			ast.Inspect(syn, f.genDecl)
		}
	}
}

func (f File) Match(spec *ast.TypeSpec) bool {
	for _, t := range f.g.types {
		if t == spec.Name.Name {
			return true
		}
	}
	return false
}

func (file File) genDecl(node ast.Node) bool {
	if d, ok := node.(*ast.TypeSpec); ok {
		// ast.Print(f.Fset, d)
		if file.Match(d) {
			file.g.Printf("// %s's tags\n", d.Name.Name)
			file.g.Printf("const (\n")
			def := file.Defs[d.Name]
			t := def.Type().Underlying()
			if s, ok := t.(*types.Struct); ok {
				// log.Println("T121:", d.Name.Name)
				n := s.NumFields()
				for i := 0; i < n; i++ {
					field := s.Field(i)
					tag := reflect.StructTag(s.Tag(i)).Get(file.g.tag)
					name := file.g.prefix + field.Name()
					val := field.Name()
					if tag != "" {
						val = strings.Split(tag, ",")[0]
					}
					if val != "-" {
						if v, ok := file.g.c[name]; !ok {
							file.g.Printf("\t%s = \"%s\"\n", name, val)
							file.g.c[name] = val
						} else {
							if v != val {
								log.Panic("T152:", name, v, val)
							}
						}
					}
				}

			}
			file.g.Printf(")\n")
		}
		return false
	}
	return true
}

// format returns the gofmt-ed contents of the Generator's buffer.
func (g *Generator) format() []byte {
	src, err := format.Source(g.buf.Bytes())
	if err != nil {
		// Should never happen, but can arise when developing this code.
		// The user can compile the output to see the error.
		fmt.Fprintf(os.Stderr, "warning: internal error: invalid Go generated: %s", err)
		fmt.Fprintf(os.Stderr, "warning: compile the package to analyze the error")
		return g.buf.Bytes()
	}
	return src
}

// func (g *Generator) generate(defs map[*ast.Ident]types.Object, outTypes []string, prefix string) {
// 	for name, o := range defs {
// 		if o != nil {
// 			if t := o.Type(); t != nil {
// 				if _, ok := t.(*types.Named); ok {
// 					u := t.Underlying()
// 					if s, ok := u.(*types.Struct); ok {
// 						log.Println("T118:", name.Name, o.Name())
// 						n := s.NumFields()
// 						for i := 0; i < n; i++ {
// 							f := s.Field(i)
// 							t := s.Tag(i)
// 							log.Println("T126:", f.Name(), t)
// 							tags := reflect.StructTag(t)
// 							log.Println("T107:", tags.Get("db"))
// 						}
// 					}
// 				}
// 			}
// 		}
// 	}
// }
